"use strict";

const assert = require('assert');
var request = require("request");

var utils = require("soajs.core.libs").utils;

var Mongo = require("soajs.core.modules").mongo;
var dbConfig = require("./db.config.test.js");

var dashboardConfig = dbConfig();
dashboardConfig.name = "core_provision";
var mongo = new Mongo(dashboardConfig);

const extKey = 'aa39b5490c4a4ed0e56d7ec1232a428f771e8bb83cfcee16de14f735d0f5da587d5968ec4f785e38570902fd24e0b522b46cb171872d1ea038e88328e7d973ff47d9392f72b2d49566209eb88eb60aed8534a965cf30072c39565bd8d72f68ac';

function executeMyRequest(params, apiPath, method, cb) {
    requester(apiPath, method, params, function (error, body) {
        assert.ifError(error);
        assert.ok(body);
        return cb(body);
    });

    function requester(apiName, method, params, cb) {
        var options = {
            uri: 'http://localhost:4000/dashboard/' + apiName,
            headers: {
                'Content-Type': 'application/json',
                key: extKey
            },
            json: true
        };

        if (params.headers) {
            for (var h in params.headers) {
                if (params.headers.hasOwnProperty(h)) {
                    options.headers[h] = params.headers[h];
                }
            }
        }

        if (params.form) {
            options.body = params.form;
        }

        if (params.qs) {
            options.qs = params.qs;
        }

        request[method](options, function (error, response, body) {
            assert.ifError(error);
            assert.ok(body);
            return cb(null, body);
        });
    }
}

let catalog = {
    "name": "testCatalog",
    "type": "server",
    "subtype": "soajs",
    "description": "This is a catalog for testing purposes.",
    "recipe": {
        "deployOptions" : {
            "image": {
                "prefix": "soajstest",
                "name": "newSoajs",
                "tag": "latest",
	            "shell": "/bin/sh"
            },
            "ports": [
                {
                    "name": "servicePort",
                    "isPublished": true,
                    "target": 84
                }
            ],
            "labels": {
                "soajs.test": "true"
            },
            "certificates": "none"
        }
    }
};
let sourceCode = {
    configuration :{
        label : "testlabel",
        repo : "repo",
        branch : "branch",
        required : false
    },
    custom : {
        label : "label",
        type : "server",
        repo : "repo",
        branch : "branch",
        required : false
    }
};
let catalogId = null;
let lockedId = null;
let params = {};
//Begin testing
describe("Testing Catalog Functionality", function() {

    describe("Testing Catalog ADD API", function(){
        //Attempt to add a catalog that contains an invalid property
        //The result should be an error generated by the IMFV
        it("Fail - Add an invalid catalog", function (done) {
            catalog.invalidProperty = "invalidProperty";

            params = {
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/add", 'post', function (result) {
                assert.ok(result.errors);
                assert.deepEqual(result.errors.details[0], {
                    "code": 173,
                    "message": "Validation failed for field: catalog -> The parameter 'catalog' failed due to: instance additionalProperty \"invalidProperty\" exists in instance when not allowed"
                });

                done();
            });
        });

        //Attempt to add a catalog that contains a valid schema
        it("Success - Add a valid catalog", function (done){

            delete catalog.invalidProperty;
            //the API will delete this property
            catalog.locked = true;

            params = {
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/add", 'post', function (result) {
                assert.ok(result.data);
                assert.ok(result.result);
                done();
            });
        });

        it("Success - Add a valid catalog with sourceCode", function (done){

            delete catalog.invalidProperty;
            //the API will delete this property
            catalog.locked = true;
            catalog.name = "testSourceCode";
            catalog.recipe.deployOptions.sourceCode = sourceCode;
            params = {
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/add", 'post', function (result) {
                assert.ok(result.data);
                assert.ok(result.result);
                done();
            });
        });

        it("Fail - Add an catalog with invalid voluming", function (done) {
            delete catalog.recipe.deployOptions.sourceCode;
            catalog.name = "testInvalidType";
            catalog.recipe.deployOptions.voluming = [{
                docker :{
                    volume : {}
                }
            }];
            params = {
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/add", 'post', function (result) {
                delete catalog.recipe.deployOptions.voluming;
                assert.ok(result.errors);
                assert.deepEqual(result.errors.details[0].code, 949);
                done();
            });
        });

        it("Fail - Add an catalog with port > 2676", function (done) {

            catalog.name = "test";
            catalog.recipe.deployOptions.ports = [
                {
                    "name": "servicePort",
                    "isPublished": true,
                    "published": 34444,
                    "target": 84
                }];
            params = {
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/add", 'post', function (result) {
                catalog.recipe.deployOptions.ports = [];
                assert.ok(result);
                assert.deepEqual(result.errors.details[0].code, 824);
                done();
            });
        });

        it("Fail - Add an catalog with invalid port", function (done) {

            catalog.name = "test";
            catalog.recipe.deployOptions.ports = [
                {
                    "name": "servicePort",
                    "target": 84
                },
                {
                    "name": "servicePort",
                    "isPublished": true,
                    "published": 34444,
                    "target": 84
                },
                {
                    "name": "servicePort",
                    "published": 34444,
                    "target": 84
                },
            ];
            params = {
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/add", 'post', function (result) {
                catalog.recipe.deployOptions.ports = [];
                assert.ok(result);
                assert.deepEqual(result.errors.details[0].code, 824);
                done();
            });
        });
    });

    describe("Testing Catalog LIST API", function() {
        //List available catalogs
        it("Success - List available catalogs", function (done) {
            params = {};

            executeMyRequest(params, "catalog/recipes/list", 'get', function (records) {
                //get the IDs of the catalogs for later use;
                records.data.forEach(function (oneRecord) {
                    if (oneRecord.name === "lockedCatalog")
                        lockedId = oneRecord._id;
                    else if(oneRecord.name === "testCatalog")
                        catalogId = oneRecord._id
                });

                assert.ok(records.data);
                assert.ok(records.data.length > 0);
                done();
            });
        });
    });

    describe("Testing Catalog EDIT API", function() {
        //Edit a record that doesn't exist
        it("Fail - Edit a record that doesn't exist", function (done) {
            delete catalog.recipe.deployOptions.sourceCode;
            params = {
                "qs": {
                    "id": "invalidId"
                },
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/update", 'put', function (result) {
                assert.ok(result.errors);
                assert.deepEqual(result.errors.details[0].code, 404);
                done();
            });
        });

        //Edit a locked record
        it("Fail - Edit a locked catalog", function (done) {
            params = {
                "qs": {
                    "id": lockedId
                },
                "form": {
                    "catalog": catalog
                }
            };

            executeMyRequest(params, "catalog/recipes/update", 'put', function (result) {
                assert.ok(result.errors);
                assert.deepEqual(result.errors.details[0], {
                    "code": 951,
                    "message": "You are not allowed to edit or delete a locked recipe"
                });
                done();
            });
        });

        //Edit a valid unlocked record
        it("Success - Edit a record", function (done) {
            catalog.recipe.buildOptions = {
                "env": {
                    "SOAJS_ENV_1": {
                        "type": "computed",
                        "default": "SOAJS_ENV_1"
                    },
                    "SOAJS_ENV_2": {
                        "type": "computed",
                        "default": "SOAJS_ENV_2"
                    },
                    "SOAJS_ENV_3": {
                        "type": "computed",
                        "default": "SOAJS_ENV_3"
                    },
                }
            };
            params = {
                "qs": {
                    "id": catalogId
                },
                "form": {
                    "catalog": catalog,
                }
            };

            executeMyRequest(params, "catalog/recipes/update", 'put', function (result) {
                assert.ok(result.data);
                assert.ok(result.result);
                done();
            });
        });
    });

	describe("Testing Catalog GET API", function(){
		it("fail - invalid catalog id", function(done){
			params = {
				"qs": {
					"id": "invalidId"
				}
			};

			executeMyRequest(params, "catalog/recipes/get", 'get', function (result) {
				assert.ok(result.errors);
				assert.deepEqual(result.errors.details[0].code, 701);
				done();
			});
		});

		it("success- valid catalog id", function(done){
			params = {
				"qs": {
					"id": catalogId
				}
			};

			executeMyRequest(params, "catalog/recipes/get", 'get', function (result) {
				assert.ok(result.data);
				done();
			});
		});
	});

    describe("Testing Catalog DELETE API", function() {
        //Delete a record that doesn't exist
        it("Fail - Delete a record that doesn't exist", function (done) {
            params = {
                "qs": {
                    "id": "invalidId"
                }
            };

            executeMyRequest(params, "catalog/recipes/delete", 'delete', function (result) {
                assert.ok(result.errors);
	            assert.deepEqual(result.errors.details[0].code, 701);
	            done();
            });
        });


        //Delete a locked record
        it("Fail - Delete a locked record", function (done) {
            params = {
                "qs": {
                    "id": lockedId
                }
            };

            executeMyRequest(params, "catalog/recipes/delete", 'delete', function (result) {
                assert.ok(result.errors);
                assert.deepEqual(result.errors.details[0], {
                    "code": 951,
                    "message": "You are not allowed to edit or delete a locked recipe"
                });
                done();
            });
        });

        //Delete a valid unlocked record
        it("Success - Delete a record", function (done) {
            params = {
                "qs": {
                    "id": catalogId
                }
            };

            executeMyRequest(params, "catalog/recipes/delete", 'delete', function (result) {
                assert.ok(result.data);
                assert.ok(result.result);
                done();
            });
        });
    });

    describe("Testing Catalog UPGRADE API", function() {

        before("add catalogs that use old schema", function(done) {
            var oldCatalogTypes = [
                { type: 'soajs', subtype: 'service' },
                { type: 'soajs', subtype: 'daemon' },
                { type: 'soajs', subtype: 'nodejs' },
                { type: 'soajs', subtype: 'java' },
                { type: 'database', subtype: 'other' },
                { type: 'mongo', subtype: 'other' },
                { type: 'es', subtype: 'other' },
                { type: 'custom', subtype: 'other' }
            ];
            var oldCatalogRecords = [];

            for(var i = 0; i < oldCatalogTypes.length; i++) {
                oldCatalogRecords.push(cloneCatalog(oldCatalogTypes[i]));
            }

            function cloneCatalog(options) {
                var tempCatalog = utils.cloneObj(catalog);
                tempCatalog.name = 'catalog-' + options.type;
                tempCatalog.type = options.type;

                if(options.subtype) {
                    tempCatalog.name += '-' + options.subtype;
                    tempCatalog.subtype = options.subtype;
                }

                delete tempCatalog.recipe.deployOptions.labels;

                //testing variables added to record, needed later to verify that the upgrade was successful
                tempCatalog.testing = true;
                tempCatalog.testingOldType = tempCatalog.type;
                if(options.subtype) {
                    tempCatalog.testingOldSubtype = tempCatalog.subtype;
                }
                /////////////////////////

                return tempCatalog;
            }

            mongo.insert('catalogs', oldCatalogRecords, function(error) {
                assert.ifError(error);
                done();
            });
        });

        it("success - will upgrade recipes to follow new schema", function(done) {
            params = {};

            executeMyRequest(params, "catalog/recipes/upgrade", 'get', function (body) {
                assert.ok(body.result);
                assert.ok(body.data);

                mongo.find('catalogs', { testing: true }, function(error, catalogs) {
                    assert.ifError(error);
                    assert.ok(catalogs);

                    catalogs.forEach(function(oneCatalog) {
                        if(oneCatalog.testingOldType === 'soajs') {
                            assert.ok(['service', 'daemon'].indexOf(oneCatalog.type) !== -1);
                        }
                        else if(['database', 'mongo', 'es'].indexOf(oneCatalog.testingOldType) !== -1) {
                            assert.equal(oneCatalog.type, 'cluster');
                            assert.ok(['mongo', 'elasticsearch'].indexOf(oneCatalog.subtype) !== -1);
                        }
                    });
                    done();
                });
            });
        });

    });

    after(function(done) {
        mongo.closeDb();
        done();
    });
});
